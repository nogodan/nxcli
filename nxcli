#!/usr/bin/env python3

motd = f"""
{'#'*80}
#  Script Name : nxcli
#  Script Purpose or Overview 
#  - Ultimate goal of this program is to use nutanix cluster without UI operation via API
#  - This program is developed with python3 
#  - This program can be used for collecting/provisiong/deleting/configure nutanix cluster entity
#  - This program requires nxapilib.py
#
#  This program is developed by Taeho Choi(taeho.choi@nutanix.com) by referring below resources
#  For reference look at:
#  https://www.digitalformula.net/2018/api/vm-performance-stats-with-nutanix-rest-api/
#  https://github.com/nelsonad77/acropolis-api-examples
#  https://github.com/sandeep-car/perfmon/
#
#   Disclaimer
#   This code is intended as a standalone example.  
#   Subject to licensing restrictions defined on nutanix.dev, 
#   this can be downloaded, copied and/or modified in any way you see fit.
#   Please be aware that all public code samples provided by Nutanix are unofficial in nature, 
#   are provided as examples only, are unsupported and will need to be heavily scrutinized 
#   and potentially modified before they can be used in a production environment.  
#   All such code samples are provided on an as-is basis,and Nutanix expressly disclaims all warranties, express or implied.
#   All code samples are Â© Nutanix, Inc., and are provided as-is under the MIT license. 
#   (https://opensource.org/licenses/MIT)
{'#'*80}
"""

import sys
import requests
import urllib.request
import nxapilib as C
import urllib3
import pprint
import time
import getpass
import base64
from itertools import chain, repeat
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import json

if __name__ == "__main__":
    print(motd)
    cluster = C.GetClusterDetail()
    while True:
        cluster_name = cluster[0]    
        ip = cluster[1]
        username = cluster[2]
        password = cluster[3]  

        mycluster = C.my_api(ip,username,password)
        #Check credential with cluster call
        #print("Verifying ID/Password ... please be patient..")
        #status, all_cluster = mycluster.get_all_entity_info("cluster")

        #Get seletction from 
        seLection = mycluster.EntityMenu(cluster_name,ip,username)

        if seLection == str(0):
            print("You've selected task progress detail....\n")
            # 1. Call cluster detail from get_cluster_information() method with api v1
            task_uuid=mycluster.GetUUid()
            status, task = mycluster.get_single_ent_info("tasks",task_uuid)
            print("Here is the task detail... \n")
            # 2. pprint cluter detail json format
            pprint.pprint(task)

        elif seLection == str(1):
            print("You've selected cluster detail....\n")
            # 1. Call cluster detail from get_cluster_information() method with api v1
            status, all_cluster = mycluster.get_all_entity_info("cluster")
            print("Here is the cluster detail... \n\n")
            # 2. pprint cluter detail json format
            pprint.pprint(all_cluster)

        elif seLection == str(2):
            print("You've selected host detail....\n")
            # 1. print all host list and get valid host uuid in list
            status, all_hosts = mycluster.print_all_ent("hosts")

            # 2. Get VM UUID for specific host from standard input
            host_uuid=mycluster.GetUUid()
            
            # 3. Display host detail for the uuid
            status, host_info = mycluster.get_single_ent_info("hosts",host_uuid)
            print("Here is the host detail... \n\n")
            pprint.pprint(host_info)

        elif seLection == str(3):
            print("You've selected VM detail....\n")
            # 1. print all host list and get valid host uuid in list
            status, all_vms = mycluster.print_all_ent("vms")

            # 2. Get VM UUID for specific VM from standard input
            vm_uuid = mycluster.GetUUid()

            # 3. Display vm detail for the uuid
            status, vm_info = mycluster.get_single_ent_info("vms",vm_uuid)
            print("Here is the vm detail... \n\n")
            pprint.pprint(vm_info)

        elif seLection == str(4):
            print("You've selected Image detail....\n")
            # 1. print all img list and get valid img uuid in list
            status, all_vms = mycluster.print_all_ent("images")
          
            # 2. Get image uuid from the list
            img_uuid=mycluster.GetUUid()
            
            # 3. Display image detail for the uuid
            status, ent_info = mycluster.get_single_ent_info("images",img_uuid)
            print("Here is the image detail... \n\n")
            pprint.pprint(ent_info)

        elif seLection == str(5):
            print("You've selected container info detail....\n")
            # 1. print all img list and get valid img uuid in list
            status, all_ctrs = mycluster.print_all_ent("ctr")

            # 2. Get ctr UUID 
            ctr_uuid=mycluster.GetUUid()
            
            # 3. Display container detail for the uuid
            status, ent_info = mycluster.get_single_ent_info("ctr",ctr_uuid)
            print("Here is the container detail... \n\n")
            pprint.pprint(ent_info)

        elif seLection == str(6):
            print("You've selected network info detail....\n")
            # 1. print all img list and get valid img uuid in list
            status, all_nets = mycluster.print_all_ent("net")

            # 2. Get image uuid from the list
            net_uuid=mycluster.GetUUid()
            
            # 3. Display net detail for the uuid
            status, ent_info = mycluster.get_single_ent_info("net",net_uuid)
            print("Here is the network detail... \n\n")
            pprint.pprint(ent_info) 

            print("\nBelow is detail ip usage if it is managed network\n")
            #4. Display subnet usage detail for the uuid
            status, ent_info = mycluster.get_single_ent_info("subnet",net_uuid)
            pprint.pprint(ent_info) 

        elif seLection == str(7):
            print("You've selected to publish new image from url..\n")
            name        = input("Enter the image_name: ")
            annotation  = input("Enther image annotation (optional): ")

            #Limiting input for image_type only 2 available options with itertool
            img_type    = {'DISK_IMAGE','ISO_IMAGE'}
            image_input = chain(["Enter image type - DISK_IMAGE or ISO_IMAGE: "], repeat("Please type correct image type again: "))
            replies     = map(input, image_input)
            valid_image = next(filter(img_type.__contains__, replies))
            
            ctrUuid     = input("Enter container uuid where you want to store this: ")
            url         = input("Enter URL where the image is located: ")
            body = {"name":name,"annotation":annotation,"imageType":valid_image,"imageImportSpec":{"containerUuid":ctrUuid,"url":url}}
            status,task_uuid = mycluster.post_new_ent("image",body)
            print ("\n\nServer Response code is: {} and task uuid is {}".format(status,task_uuid["taskUuid"]))
            print("\n")
            status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["taskUuid"])
            pprint.pprint(ent_info)
            print("\n")

        elif seLection == str(8):
            print("You've selected to create new VM with cloud-init..\n")
            print("This task support to create VM from disk image in image list\n")
            #Get no of VM to create
            num_vm                                                              = int(input("How many VMs you want to deplpy?: "))
            #body dictionary init
            body={"name":str,"memory_mb":int,"num_vcpus":int,"description":str,"num_cores_per_vcpu":int,"timezone":str,"boot":{"uefi_boot":False,"boot_device_order":["CDROM","DISK","NIC"]},"vm_disks":[{"is_cdrom":False,"disk_address":{"device_bus":"scsi"},"vm_disk_clone":{"disk_address":{"vmdisk_uuid":str},"minimum_size":int}}],"vm_nics":[{"network_uuid":str,"is_connected":True}],"hypervisor_type":"ACROPOLIS","vm_customization_config":{"userdata":str,"files_to_inject_list":[]},"vm_features":{"AGENT_VM":False}}           
            vm_name                                                             = input("Enter VM name: ")
            body["num_vcpus"]                                                   = int(input("Enter num of vcpus: "))
            body["num_cores_per_vcpu"]                                          = int(input("Enter num of vcpu per sockets: "))
            body["memory_mb"]                                                   = 1024*int(input("Enter VM memory size(GB): "))
            vm_description                                                      = input("Enter VM description: ")
            body["timezone"]                                                    = input("Enter timezone ex) UTC: ")
            body["vm_nics"][0]["network_uuid"]                                  = input("Enter network uuid: ")
            body["vm_disks"][0]["vm_disk_clone"]["disk_address"]["vmdisk_uuid"] = input("Enter VMDISK_ID for disk image: ")
            body["vm_disks"][0]["vm_disk_clone"]["minimum_size"]                = 1024*1024*1024*int(input("Enter vmdisk size(GB) : "))

            print("Please cp(or mv) your cloud-init file in same directory with this nxcli program ... ")  
            #Get cloud init config from local file
            cl_int_f                                                            = input("Enter cloud-init filename in cwd: ")
            fd_cl_int_f = open(cl_int_f,"r")
            body["vm_customization_config"]["userdata"]                         = fd_cl_int_f.read()
            fd_cl_int_f.close()

            #Check to see if this is bulk vm creation request > 1 ea
            if num_vm == 1:
                body["name"] = vm_name
                body["description"] = vm_description
                status,task_uuid = mycluster.create_vm(body)
                print ("\n\nServer Response code is: {} and task uuid is {}".format(status,task_uuid["task_uuid"]))
                print("\n")
                status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["task_uuid"])
                pprint.pprint(ent_info)
                print("\n")
            
            elif num_vm > 1:
                for i in range(1,num_vm+1):
                    body["name"] = vm_name +"-"+str(i)
                    body["description"] = vm_description +"-"+str(i)
                    status,task_uuid = mycluster.create_vm(body)
                    print ("\n\nServer Response code is: {} and task uuid is {}".format(status,task_uuid["task_uuid"]))
                    print("\n")
                    status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["task_uuid"])
                    pprint.pprint(ent_info)
                    print("\n")
            
            else: print("Oops something went wrong")

        elif seLection == str(9):
            print("You've selected to VM power operation\n")
            body = {"transition": str,"uuid": str}

            # Print all current VMs and get valid VM uuid list from print_all_ent method
            status, vmUUid = mycluster.print_all_ent("vms")
            print("\n")
            body["uuid"] = input("Enter vm uuid for power operation:(type ALL for all user VMs) ")
            print("CVM won't be affected by OFF operation but Prism Central VM will ")

            #Limiting input for power status only 2 available options with itertool
            pwr_stat    = {'ON','OFF'}
            stat_input  = chain(["Enter the new power status of the vm - ON or OFF: "], repeat("Please type correct power status again: "))
            replies     = map(input, stat_input)
            body["transition"] = next(filter(pwr_stat.__contains__, replies))

            if body["uuid"] == "ALL":
                #Get all available vm uuid as list
                status, all_vms= mycluster.print_all_ent("vms")
                for i in all_vms:
                    body["uuid"] = i
                    status,task_uuid = mycluster.vm_powerop(body,body["uuid"])
                    print ("\n\nServer Response code is: {} and {}".format(status,task_uuid))
                    print("\n")
                    status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["task_uuid"])
                    pprint.pprint(ent_info)
                    print("\n")
                
            else:    
                status,task_uuid = mycluster.vm_powerop(body,body["uuid"])
                print ("\n\nServer Response code is: {} and  {}".format(status,task_uuid))
                print("\n")
                status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["task_uuid"])
                pprint.pprint(ent_info)
                print("\n")

        elif seLection == str(10):
            print("You've selected to VM DELETE operation\n")
            confirm = input("Type CONFIRM to proceed delete VM: ")
            #Get confirm to delete vm 
            if confirm == "CONFIRM":
                body = {"uuid": str}
                # Print all current VMs and get valid VM uuid list from print_all_ent method
                status, vmUUid = mycluster.print_all_ent("vms")

                # Get an uuid input as long as it is valid
                stat_input  = chain(["\n\nEnter vm uuid to DELETE operation: "], repeat("Please type correct VM Uuid: "))
                replies     = map(input, stat_input)
                body["uuid"] = next(filter(vmUUid.__contains__, replies))
                status,task_uuid = mycluster.delete_vm(body,body["uuid"])
                print ("\n\nServer Response code is: {} and task uuid is {}".format(status,task_uuid["task_uuid"]))
                print("\n")
                status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["task_uuid"])
                pprint.pprint(ent_info)
                print("\n")
            else:
                print("Returning to main menu") 
                mycluster.EntityMenu(cluster_name,ip,username)

        elif seLection == str(11):
            print("You've selected to performance data collection operation\n")         
            ent_type    = input("type 1 for vm, 2 for host:  ")
            period      = int(input("type period to trace past data (hr) - max 4:  "))
            interval    = int(input("type perfromance data sampling interval(sec) - min 30:  "))
            uuid        = input("type uuid for vm or host to check: ")

            if ent_type == "1":
                ent_type = 'vm'
            elif ent_type == "2":
                ent_type = 'host'
            else:
                print ("Selected wrong option")

            #5. Get CPU stats from arithmos base interval
            status, resp = mycluster.get_resource_stats(ent_type,uuid,"cpu",period,interval)
            stats = resp['statsSpecificResponses'][0]
            if (stats['successful'] != True):
                print (">> CPU Stat call to", ip, "failed. Aborting... <<")
                sys.exit(1)
            cpu_stats = stats['values']
            i=0
            cpu_min = sys.maxsize
            cpu_max=0
            running_total=0
            for cpu in cpu_stats:
                if (cpu < cpu_min):
                    cpu_min = int(cpu)
                if (cpu > cpu_max):
                    cpu_max = int(cpu)
                running_total += int(cpu)
                i=i+1
            print ("Percentage utilization last %s hr: CPU_MAX: %5.2f CPU_MIN: %5.2f CPU_AVG %5.2f" % (period,cpu_max/10000,cpu_min/10000,(running_total/10000)/i))

            #6. Get MEM stats from arithmos base interval
            status, resp = mycluster.get_resource_stats(ent_type,uuid,"mem",period,interval)
            stats = resp['statsSpecificResponses'][0]
            if (stats['successful'] != True):
                print (">> Memory Stat call to",ip, "failed. Aborting... <<")
                sys.exit(1)
            mem_stats = stats['values']
            i=0
            mem_min = sys.maxsize
            mem_max=0
            running_total=0
            for mem in mem_stats:
                if (mem < mem_min):
                    mem_min = int(mem)
                if (mem > mem_max):
                    mem_max = int(mem)
                running_total += int(mem)
                i=i+1
            print ("Percentage utilization last %s hr: MEM_MAX: %5.2f MEM_MIN: %5.2f MEM_AVG %5.2f" % (period,mem_max/10000,mem_min/10000,(running_total/10000)/i))

        elif seLection == str(12):
            print("You've selected disk detail....\n")
            # 1. Get the UUID of all VMs.
            status, all_disks = mycluster.get_all_entity_info("disk")

            #Creating temp list for counting disks in each tier
            sto_tier = [n["storage_tier_name"] for n in all_disks["entities"]]

            #Printing total no of disks and SSD / HDD 
            print("## There are total {} disks (SSD: {} HDD: {})".format(len(all_disks['entities']),sto_tier.count("SSD"),sto_tier.count("HDD")))
            print("############################### \n")

            for n in all_disks["entities"]:
                print("Disk id: " + n["disk_hardware_config"]["disk_id"].split(':')[-1])
                print("Disk SN: " + n["disk_hardware_config"]["serial_number"])
                print("Model Number: "+n["disk_hardware_config"]["model"])
                print("FW ver: " + n["disk_hardware_config"]["target_firmware_version"])
                print("CVM_IP: " + n["cvm_ip_address"])
                print("Slot location: "+ str(n["location"]))
                print("Is bad?: "+ str(n["disk_hardware_config"]["bad"]))
                print("Is mounted?: "+str(n["disk_hardware_config"]["mounted"]))
                print("Is online?: "+str(n["online"]))
                print("Storage Tier: "+ n["storage_tier_name"])
                print("Disk Size: %5.2f GB " % (float(n["disk_size"])/1024/1024/1024))
                print("###############################")

        elif seLection == str(13):
            print("You've selected new cluster setup option..\n")           
            print("1. Please fill in EULA form to accept:...\n")
            eula={}
            eula["username"]        = input("please enter username: ")
            eula["companyName"]     = input("please enter company name: ")
            eula["jobTitle"]        = input("please enter your job title: ")
            
            status,task_uuid = mycluster.post_new_ent("eula",eula)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))
            
            print("2. Please fill in pulse option:...\n")
            pulse={"emailContactList":[],"enable":str,"enableDefaultNutanixEmail":str,"isPulsePromptNeeded":"false"}
            #pulse["emailContactList"]                       = input("please enter contact email list: ")
            pulse["enable"]                                 = input("please type pulse enable true or false: ")
            pulse["enableDefaultNutanixEmail"]              = input("Enable Default NutanixEmail? true or false: ")
            status,task_uuid = mycluster.post_new_ent("pulse",pulse)
            print ("\n\nServer Response code is: {} and task response is {}".format(status,task_uuid))
        
            print("3. Please share public ssh-key for cluster ssh access:...\n")
            sshkey={}
            sshkey["key"]                                   = input("please copy and paste your public-key - single line: ")
            sshkey["name"]                                  = input("please type your ssh-key name: ")
            status,task_uuid = mycluster.post_new_ent("pubkey",sshkey)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))
            
            print("3. Please type ntp server to set for the cluster :...\n")
            ntpip={}
            ntpip["value"]                                   = input("please type ntp ip address: ")
            status,task_uuid = mycluster.post_new_ent("ntp",ntpip)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))      

            print("4. Please typedns server ip to set for the cluster :...\n")
            dnsip={}    
            dnsip["value"]                                   = input("please type dns ip address: ")
            status,task_uuid = mycluster.post_new_ent("dns",dnsip)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))    

            print("5. Please type simple DHCP network detail to create :...\n")
            print("If you want to create managed network please use main menu15\n")
            subnet={}
            subnet["name"]                                   = input("please type network name: ")
            subnet["vlanId"]                                 = input("please type network vlan id: ")
            status,task_uuid = mycluster.post_new_ent("net",subnet)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))

        elif seLection == str(14):
            print("You've selected run new ncc health check option..\n")
            body = {"sendEmail":False}

            EmailOpt    = {'true','false'}
            stat_input  = chain(["Do you want to send output to email(true/false)?: "], repeat("Please type correct option again (true/false): "))
            replies     = map(input, stat_input)
            body["sendEmail"] = next(filter(EmailOpt.__contains__, replies))
            status,task_uuid = mycluster.post_new_ent("ncc",body)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))
            if status == "500":
                print("Another NCC check is already running")
                break
            print("Checking the progress of the task\n")
            print("Press Ctrl+C when task reach to 100% \n")
            try:
                while True:
                    status, ent_info = mycluster.get_single_ent_info("tasks",task_uuid["taskUuid"])
                    pprint.pprint(ent_info)
                    print("\n")
                    time.sleep(5)
            except KeyboardInterrupt:
                pass

            print ("Checking task the ncc output\n")        
            status,output = mycluster.get_single_ent_info("ncc",task_uuid["taskUuid"])
            pprint.pprint(output)

        elif seLection == str(15):
            print("You've selected to create new managed network..\n")
            body = {"name":str,"vlanId":str,"ipConfig":{"dhcpOptions":{"domainNameServers":str},"networkAddress":str,"prefixLength":str,"defaultGateway":str,"pool":[{"range":"10.2.123.119 10.2.123.126"}]}}
            body["name"]                                            = input("please type managed_network name: ")
            body["vlanId"]                                          = input("please type network vlan id: ")
            body["ipConfig"]["dhcpOptions"]["domainNameServers"]    = input("please type dns server ip for this net: ")
            body["ipConfig"]["networkAddress"]                      = input("please type network address: ")
            body["ipConfig"]["prefixLength"]                        = input("please type network prefix number ex)24,22,16: ")
            body["ipConfig"]["defaultGateway"]                      = input("please type network GW: ")
            ipStart                                                 = input("please starting ip address: ")
            ipEnd                                                   = input("please end ip address: ")
            range =ipStart+' '+ipEnd
            body["ipConfig"]["pool"][0]["range"]                    = range  
            status,task_uuid = mycluster.post_new_ent("man_net",body)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))

        elif seLection == str(16):
            print("You've selected change admin password \n")
            body = {"oldPassword":str,"newPassword":str}
            body["oldPassword"]                                     = input("please type current admin password: ")
            body["newPassword"]                                     = input("please type new admin password: ")

            status,task_uuid = mycluster.post_new_ent("passwd",body)
            print ("\n\nServer Response code is: {} and task response is {}\n".format(status,task_uuid))
            if status == 200:
                #update passwd on current config file
                mycluster = C.my_api(ip,username,body["newPassword"])
                mycluster.NewPasswd(body["newPassword"]) 
                #update current in-use passwd  

        elif seLection == 'q':
            break

        else :
            print("You've selected wrong option")